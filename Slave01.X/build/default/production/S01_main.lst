CCS PCM C Compiler, Version 5.015, 5967               10-Feb-25 12:28

               Filename:   D:\College\Graduation Project\Compiler\current_working_code\works03\Slave01.X\build\default\production\S01_main.lst

               ROM used:   467 words (23%)
                           Largest free fragment is 1581
               RAM used:   26 (12%) at main() level
                           30 (13%) worst case
               Stack used: 2 locations (1 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   076
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   7F,W
0009:  MOVWF  20
000A:  MOVF   0A,W
000B:  MOVWF  27
000C:  CLRF   0A
000D:  SWAPF  20,F
000E:  MOVF   04,W
000F:  MOVWF  22
0010:  MOVF   77,W
0011:  MOVWF  23
0012:  MOVF   78,W
0013:  MOVWF  24
0014:  MOVF   79,W
0015:  MOVWF  25
0016:  MOVF   7A,W
0017:  MOVWF  26
0018:  BCF    03.7
0019:  BCF    03.5
001A:  BTFSS  0B.5
001B:  GOTO   01E
001C:  BTFSC  0B.2
001D:  GOTO   02F
001E:  MOVF   22,W
001F:  MOVWF  04
0020:  MOVF   23,W
0021:  MOVWF  77
0022:  MOVF   24,W
0023:  MOVWF  78
0024:  MOVF   25,W
0025:  MOVWF  79
0026:  MOVF   26,W
0027:  MOVWF  7A
0028:  MOVF   27,W
0029:  MOVWF  0A
002A:  SWAPF  21,W
002B:  MOVWF  03
002C:  SWAPF  7F,F
002D:  SWAPF  7F,W
002E:  RETFIE
.................... /* 
....................  *  Slave 1 Node 
....................  *  Author: Hesham Ahmed 
....................  *  Edit date: 2, 2, 2024 
....................  *  Version:20 
....................  */ 
.................... /*------------------------------ Includes ------------------------------*/ 
.................... #include <16F628A.h> 
.................... //////////// Standard Header file for the PIC16F628A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F628A 
....................  
.................... #list 
....................  
.................... #fuses HS,INTRC_IO, NOWDT, NOPROTECT, NOMCLR ,NOLVP 
.................... #use delay(CLOCK=4000000) 
*
0061:  MOVLW  36
0062:  MOVWF  04
0063:  BCF    03.7
0064:  MOVF   00,W
0065:  BTFSC  03.2
0066:  GOTO   075
0067:  MOVLW  01
0068:  MOVWF  78
0069:  CLRF   77
006A:  DECFSZ 77,F
006B:  GOTO   06A
006C:  DECFSZ 78,F
006D:  GOTO   069
006E:  MOVLW  4A
006F:  MOVWF  77
0070:  DECFSZ 77,F
0071:  GOTO   070
0072:  GOTO   073
0073:  DECFSZ 00,F
0074:  GOTO   067
0075:  RETURN
.................... /*------------------------- Macros Declaration -------------------------*/ 
....................  
....................  
.................... /*Timer starting count*/ 
.................... //overflow_width = PRESCALER *(256 - TIMER_PRELOAD) 
.................... #define TIMER_PRELOAD   106 
.................... #define PRESCALER   T0_DIV_16  //16 
....................  
.................... /*logical states*/ 
.................... #define HIGH        1 
.................... #define LOW         0 
....................  
.................... #define TRUE        1 
.................... #define FALSE       0 
....................  
....................  
.................... /*Slave clock input PIN*/ 
.................... #define S_CLK_PIN       PIN_A0 
....................  
.................... /*Slave Read PIN*/ 
.................... #define S_R_PIN         PIN_A1 
....................  
.................... /*Slave Write PIN*/ 
.................... #define S_W_PIN         PIN_A2 
....................  
.................... /*Slave Button read PIN*/ 
.................... #define BUT_UP_PIN         PIN_B1 
.................... #define BUT_DOWN_PIN       PIN_B3 
....................  
.................... /*Slave LED PIN(Indicates that it's order is registered)*/ 
.................... #define LED_DOWN_PIN       PIN_A6  
.................... #define LED_UP_PIN         PIN_A7  
....................  
.................... /*Timer conditions*/ 
.................... //start number of slaves calculation 
.................... #define TIMER_SRART     0 
.................... //end number of slaves calculation 
.................... #define TIMER_END       1 
.................... //the normal operation at every idle long pulse 
.................... #define TIMER_NORMAL    2 
....................  
.................... /*DIP pins*/ 
.................... //to get slave ID 
.................... #define DIP_PIN0         PIN_B4  
.................... #define DIP_PIN1         PIN_B5 
.................... #define DIP_PIN2         PIN_B6 
.................... #define DIP_PIN3         PIN_B7 
....................  
.................... /*the display bits number*/ 
.................... #define DISPLAY_BITS    4 
....................  
.................... /*-------------------- Macro Functions Declaration ---------------------*/ 
.................... /*Get bit*/ 
.................... #define GET_BIT(Reg, bit) ((Reg >> bit)&1) 
.................... /*Set bit*/ 
.................... #define SET_BIT(Reg, bit) Reg = Reg|(1 << bit) 
....................  
.................... /*----------------------- Data Types Declaration -----------------------*/ 
.................... typedef unsigned char u8; 
.................... typedef signed char s8; 
.................... typedef int16 s16; 
....................  
.................... /*-------------------- Global Variables Definition ---------------------*/ 
.................... volatile s16 cycleCounter = -1; 
.................... volatile u8 slaves = 0; 
.................... volatile s16 edge_counter = 0; 
.................... volatile u8 slaves_calculaion = TRUE; 
.................... volatile u8 overflowAction = TIMER_NORMAL; 
.................... volatile u8 ID = 0; 
.................... volatile u8 currentFloorNumber = 0; 
.................... volatile u8 FloorNumberCalculating = 0; 
.................... volatile u8 bitShift = DISPLAY_BITS - 1; 
....................  
.................... /*-------------------------- APIs Definition ---------------------------*/ 
....................  
.................... /*-------------------------- ISRs Definition ---------------------------*/ 
.................... #int_TIMER0 
.................... void timer0_isr(void) 
.................... { 
....................     set_timer0(TIMER_PRELOAD); 
*
002F:  MOVLW  6A
0030:  MOVWF  01
....................     if(overflowAction == TIMER_NORMAL) 
0031:  MOVF   2E,W
0032:  SUBLW  02
0033:  BTFSS  03.2
0034:  GOTO   03E
....................     { 
....................         cycleCounter = -1; 
0035:  MOVLW  FF
0036:  MOVWF  29
0037:  MOVWF  28
....................         bitShift = DISPLAY_BITS - 1; 
0038:  MOVLW  03
0039:  MOVWF  32
....................         currentFloorNumber = FloorNumberCalculating; 
003A:  MOVF   31,W
003B:  MOVWF  30
....................         FloorNumberCalculating = 0; 
003C:  CLRF   31
....................     } 
003D:  GOTO   05E
....................     else if(overflowAction == TIMER_SRART) 
003E:  MOVF   2E,F
003F:  BTFSS  03.2
0040:  GOTO   046
....................     { 
....................         edge_counter = 0; 
0041:  CLRF   2C
0042:  CLRF   2B
....................         overflowAction = TIMER_END; 
0043:  MOVLW  01
0044:  MOVWF  2E
....................     } 
0045:  GOTO   05E
....................     else if(overflowAction == TIMER_END) 
0046:  DECFSZ 2E,W
0047:  GOTO   05E
....................     { 
....................         slaves = (edge_counter - DISPLAY_BITS * 2)/8; 
0048:  MOVLW  08
0049:  SUBWF  2B,W
004A:  MOVWF  37
004B:  MOVF   2C,W
004C:  MOVWF  38
004D:  MOVLW  00
004E:  BTFSS  03.0
004F:  MOVLW  01
0050:  SUBWF  38,F
0051:  RRF    38,W
0052:  MOVWF  7A
0053:  RRF    37,W
0054:  MOVWF  79
0055:  RRF    7A,F
0056:  RRF    79,F
0057:  RRF    7A,F
0058:  RRF    79,F
0059:  MOVF   79,W
005A:  MOVWF  2A
....................         slaves_calculaion = FALSE; 
005B:  CLRF   2D
....................         overflowAction = TIMER_NORMAL; 
005C:  MOVLW  02
005D:  MOVWF  2E
....................     } 
005E:  BCF    0B.2
005F:  BCF    0A.3
0060:  GOTO   01E
.................... } 
.................... /*-------------------------- Application ---------------------------*/ 
.................... void main() 
*
0076:  MOVF   03,W
0077:  ANDLW  1F
0078:  MOVWF  03
0079:  BSF    03.5
007A:  BSF    0E.3
007B:  MOVLW  FF
007C:  BCF    03.5
007D:  MOVWF  29
007E:  MOVLW  FF
007F:  MOVWF  28
0080:  CLRF   2A
0081:  CLRF   2C
0082:  CLRF   2B
0083:  MOVLW  01
0084:  MOVWF  2D
0085:  MOVLW  02
0086:  MOVWF  2E
0087:  CLRF   2F
0088:  CLRF   30
0089:  CLRF   31
008A:  MOVLW  03
008B:  MOVWF  32
008C:  MOVLW  07
008D:  MOVWF  1F
008E:  BCF    03.7
.................... { 
.................... /*---------------------------- Setup -------------------------------*/ 
....................     /*CLK PIN*/ 
....................     output_float(S_CLK_PIN); 
008F:  BSF    03.5
0090:  BSF    05.0
....................     /*LED PIN*/ 
....................     output_drive(LED_UP_PIN); 
0091:  BCF    05.7
....................     output_low(LED_UP_PIN); 
0092:  BCF    05.7
0093:  BCF    03.5
0094:  BCF    05.7
....................      
....................     output_drive(LED_DOWN_PIN); 
0095:  BSF    03.5
0096:  BCF    05.6
....................     output_low(LED_DOWN_PIN); 
0097:  BCF    05.6
0098:  BCF    03.5
0099:  BCF    05.6
....................      
....................     /*Write PIN*/ 
....................     output_drive(S_W_PIN); 
009A:  BSF    03.5
009B:  BCF    05.2
....................     output_low(S_W_PIN); 
009C:  BCF    05.2
009D:  BCF    03.5
009E:  BCF    05.2
....................      
....................     /*Read PIN*/ 
....................     output_float(S_R_PIN); 
009F:  BSF    03.5
00A0:  BSF    05.1
....................  
....................     //Slave ID setting 
....................     set_tris_b(0b11110000); 
00A1:  MOVLW  F0
00A2:  MOVWF  06
....................     output_b(0b11110000); 
00A3:  CLRF   06
00A4:  BCF    03.5
00A5:  MOVWF  06
....................     ID  = input_state(DIP_PIN3) << 3; 
00A6:  MOVLW  00
00A7:  BTFSC  06.7
00A8:  MOVLW  01
00A9:  MOVWF  77
00AA:  RLF    77,W
00AB:  MOVWF  2F
00AC:  RLF    2F,F
00AD:  RLF    2F,F
00AE:  MOVLW  F8
00AF:  ANDWF  2F,F
....................     ID |= input_state(DIP_PIN2) << 2; 
00B0:  MOVLW  00
00B1:  BTFSC  06.6
00B2:  MOVLW  01
00B3:  MOVWF  77
00B4:  RLF    77,F
00B5:  RLF    77,F
00B6:  MOVLW  FC
00B7:  ANDWF  77,F
00B8:  MOVF   77,W
00B9:  IORWF  2F,F
....................     ID |= input_state(DIP_PIN1) << 1; 
00BA:  MOVLW  00
00BB:  BTFSC  06.5
00BC:  MOVLW  01
00BD:  MOVWF  77
00BE:  BCF    03.0
00BF:  RLF    77,F
00C0:  MOVF   77,W
00C1:  IORWF  2F,F
....................     ID |= input_state(DIP_PIN0) << 0; 
00C2:  MOVLW  00
00C3:  BTFSC  06.4
00C4:  MOVLW  01
00C5:  IORWF  2F,F
....................     set_tris_b(0b11110000); 
00C6:  MOVLW  F0
00C7:  BSF    03.5
00C8:  MOVWF  06
....................      
....................     /*BUTTON PIN*/ 
....................     output_float(BUT_UP_PIN); 
00C9:  BSF    06.1
.................... //    output_high(BUT_UP_PIN); 
....................      
....................     output_float(BUT_DOWN_PIN); 
00CA:  BSF    06.3
.................... //    output_high(BUT_DOWN_PIN); 
....................      
....................     //Timer Setting 
....................     setup_timer_0(T0_INTERNAL|PRESCALER|T0_8_BIT); 
00CB:  MOVF   01,W
00CC:  ANDLW  C0
00CD:  IORLW  03
00CE:  MOVWF  01
....................     enable_interrupts(GLOBAL); 
00CF:  MOVLW  C0
00D0:  BCF    03.5
00D1:  IORWF  0B,F
....................     enable_interrupts(INT_TIMER0); 
00D2:  BSF    0B.5
....................      
....................     u8 currentCLK_Edge; 
....................     u8 prevCLK_Edge ; 
....................     /*waiting*/ 
....................     delay_ms(1000); 
00D3:  MOVLW  04
00D4:  MOVWF  35
00D5:  MOVLW  FA
00D6:  MOVWF  36
00D7:  CALL   061
00D8:  DECFSZ 35,F
00D9:  GOTO   0D5
....................     delay_ms(1000); 
00DA:  MOVLW  04
00DB:  MOVWF  35
00DC:  MOVLW  FA
00DD:  MOVWF  36
00DE:  CALL   061
00DF:  DECFSZ 35,F
00E0:  GOTO   0DC
....................     delay_ms(1000); 
00E1:  MOVLW  04
00E2:  MOVWF  35
00E3:  MOVLW  FA
00E4:  MOVWF  36
00E5:  CALL   061
00E6:  DECFSZ 35,F
00E7:  GOTO   0E3
....................     delay_ms(1000); 
00E8:  MOVLW  04
00E9:  MOVWF  35
00EA:  MOVLW  FA
00EB:  MOVWF  36
00EC:  CALL   061
00ED:  DECFSZ 35,F
00EE:  GOTO   0EA
....................     delay_ms(1000); 
00EF:  MOVLW  04
00F0:  MOVWF  35
00F1:  MOVLW  FA
00F2:  MOVWF  36
00F3:  CALL   061
00F4:  DECFSZ 35,F
00F5:  GOTO   0F1
....................    
....................     set_timer0(TIMER_PRELOAD); 
00F6:  MOVLW  6A
00F7:  MOVWF  01
....................     overflowAction = TIMER_SRART; 
00F8:  CLRF   2E
....................     prevCLK_Edge = input_state(S_CLK_PIN);//input(S_CLK_PIN); 
00F9:  CLRF   34
00FA:  BTFSC  05.0
00FB:  INCF   34,F
....................     while(slaves_calculaion) 
00FC:  MOVF   2D,F
00FD:  BTFSC  03.2
00FE:  GOTO   10E
....................     { 
....................         currentCLK_Edge = input_state(S_CLK_PIN);//input(S_CLK_PIN); 
00FF:  CLRF   33
0100:  BTFSC  05.0
0101:  INCF   33,F
....................         if(prevCLK_Edge != currentCLK_Edge) 
0102:  MOVF   33,W
0103:  SUBWF  34,W
0104:  BTFSC  03.2
0105:  GOTO   10B
....................         {       
....................             set_timer0(TIMER_PRELOAD); 
0106:  MOVLW  6A
0107:  MOVWF  01
....................             edge_counter++; 
0108:  INCF   2B,F
0109:  BTFSC  03.2
010A:  INCF   2C,F
....................         } 
....................         prevCLK_Edge = currentCLK_Edge;  
010B:  MOVF   33,W
010C:  MOVWF  34
010D:  GOTO   0FC
....................     } 
....................  
.................... /*--------------------------- MAIN LOOP ----------------------------*/ 
....................     while (TRUE) 
....................     { 
....................         currentCLK_Edge = input_state(S_CLK_PIN);//input(S_CLK_PIN); 
010E:  CLRF   33
010F:  BTFSC  05.0
0110:  INCF   33,F
....................         if(prevCLK_Edge != currentCLK_Edge) 
0111:  MOVF   33,W
0112:  SUBWF  34,W
0113:  BTFSC  03.2
0114:  GOTO   117
....................         { 
....................             set_timer0(TIMER_PRELOAD); 
0115:  MOVLW  6A
0116:  MOVWF  01
....................         } 
....................         if (prevCLK_Edge && !currentCLK_Edge)  // Falling edge detection 
0117:  MOVF   34,F
0118:  BTFSC  03.2
0119:  GOTO   154
011A:  MOVF   33,F
011B:  BTFSS  03.2
011C:  GOTO   154
....................         { 
....................             cycleCounter++; 
011D:  INCF   28,F
011E:  BTFSC  03.2
011F:  INCF   29,F
....................             // Slave Write 
....................             if(cycleCounter < (slaves*2)) 
0120:  BCF    03.0
0121:  RLF    2A,W
0122:  MOVF   29,F
0123:  BTFSS  03.2
0124:  GOTO   150
0125:  SUBWF  28,W
0126:  BTFSC  03.0
0127:  GOTO   150
....................             { 
....................                 if ((u8)(cycleCounter / 2) == ID) 
0128:  BCF    03.0
0129:  RRF    29,W
012A:  MOVWF  7A
012B:  RRF    28,W
012C:  MOVWF  79
012D:  SUBWF  2F,W
012E:  BTFSS  03.2
012F:  GOTO   14F
....................                 { 
....................                     /*cycleCounter % 2 = 0 indicates up button 
....................                       cycleCounter % 2 = 1 indicates down button*/ 
....................                     if((cycleCounter % 2) == 0) 
0130:  MOVF   28,W
0131:  ANDLW  01
0132:  MOVWF  35
0133:  CLRF   36
0134:  MOVF   35,F
0135:  BTFSS  03.2
0136:  GOTO   145
0137:  MOVF   36,F
0138:  BTFSS  03.2
0139:  GOTO   145
....................                     {/*up cycle*/ 
....................                
....................                         if(input_state(BUT_UP_PIN) == LOW)  
013A:  BTFSC  06.1
013B:  GOTO   144
....................                         { 
....................                             if(currentFloorNumber != ID) 
013C:  MOVF   2F,W
013D:  SUBWF  30,W
013E:  BTFSC  03.2
013F:  GOTO   144
....................                                 output_high(S_W_PIN); 
0140:  BSF    03.5
0141:  BCF    05.2
0142:  BCF    03.5
0143:  BSF    05.2
....................                             //output_high(BUT_UP_PIN); 
....................                         } 
....................                     } 
0144:  GOTO   14F
....................                     else 
....................                     {/*down cycle*/ 
....................                         if(input_state(BUT_DOWN_PIN) == LOW)  
0145:  BTFSC  06.3
0146:  GOTO   14F
....................                         { 
....................                             if(currentFloorNumber != ID) 
0147:  MOVF   2F,W
0148:  SUBWF  30,W
0149:  BTFSC  03.2
014A:  GOTO   14F
....................                                 output_high(S_W_PIN); 
014B:  BSF    03.5
014C:  BCF    05.2
014D:  BCF    03.5
014E:  BSF    05.2
....................                             //output_high(BUT_DOWN_PIN); 
....................                         } 
....................                     } 
....................                 } 
....................             } 
014F:  GOTO   153
....................             else 
....................             { 
....................                 output_float(S_R_PIN); 
0150:  BSF    03.5
0151:  BSF    05.1
0152:  BCF    03.5
....................             } 
....................         } 
0153:  GOTO   1CF
....................         else if(!prevCLK_Edge && currentCLK_Edge)   // Rising edge detection 
0154:  MOVF   34,F
0155:  BTFSS  03.2
0156:  GOTO   1CF
0157:  MOVF   33,F
0158:  BTFSC  03.2
0159:  GOTO   1CF
....................         { 
....................             // Read Write 
....................             if(cycleCounter >= (slaves * 2)) 
015A:  BCF    03.0
015B:  RLF    2A,W
015C:  MOVF   29,F
015D:  BTFSS  03.2
015E:  GOTO   162
015F:  SUBWF  28,W
0160:  BTFSS  03.0
0161:  GOTO   1B0
....................             { 
....................                 FloorNumberCalculating |= (input_state(S_R_PIN)  << bitShift); 
0162:  MOVLW  00
0163:  BTFSC  05.1
0164:  MOVLW  01
0165:  MOVWF  77
0166:  MOVF   32,W
0167:  MOVWF  78
0168:  BTFSC  03.2
0169:  GOTO   16E
016A:  BCF    03.0
016B:  RLF    77,F
016C:  DECFSZ 78,F
016D:  GOTO   16A
016E:  MOVF   77,W
016F:  IORWF  31,F
....................                 bitShift--; 
0170:  DECF   32,F
....................                 /* Recharging the capacitor before its turn and before  
....................                 * the master sends the floor number. */ 
....................                if(cycleCounter >= (2 * slaves - 1)) 
0171:  BCF    03.0
0172:  RLF    2A,W
0173:  ADDLW  FF
0174:  MOVF   29,F
0175:  BTFSS  03.2
0176:  GOTO   17A
0177:  SUBWF  28,W
0178:  BTFSS  03.0
0179:  GOTO   17F
....................                { 
....................                    output_drive(S_R_PIN); 
017A:  BSF    03.5
017B:  BCF    05.1
....................                    output_high(S_R_PIN); 
017C:  BCF    05.1
017D:  BCF    03.5
017E:  BSF    05.1
....................                } 
....................                 if ((u8)(cycleCounter / 2 - slaves) == ID) 
017F:  BCF    03.0
0180:  RRF    29,W
0181:  MOVWF  36
0182:  RRF    28,W
0183:  MOVWF  35
0184:  MOVF   2A,W
0185:  SUBWF  35,W
0186:  MOVWF  77
0187:  MOVF   36,W
0188:  MOVWF  7A
0189:  MOVLW  00
018A:  BTFSS  03.0
018B:  MOVLW  01
018C:  SUBWF  7A,F
018D:  MOVF   77,W
018E:  SUBWF  2F,W
018F:  BTFSS  03.2
0190:  GOTO   1AF
....................                 { 
....................                     /*cycleCounter % 2 = 0 indicates up LED 
....................                       cycleCounter % 2 = 1 indicates down LED*/ 
....................                     if(cycleCounter % 2 == 0) 
0191:  MOVF   28,W
0192:  ANDLW  01
0193:  MOVWF  35
0194:  CLRF   36
0195:  MOVF   35,F
0196:  BTFSS  03.2
0197:  GOTO   1A7
0198:  MOVF   36,F
0199:  BTFSS  03.2
019A:  GOTO   1A7
....................                     {/*up cycle*/ 
....................                         output_bit(LED_UP_PIN, !(input_state(S_R_PIN))); 
019B:  BTFSS  05.1
019C:  GOTO   19F
019D:  BCF    05.7
019E:  GOTO   1A0
019F:  BSF    05.7
01A0:  BSF    03.5
01A1:  BCF    05.7
....................                         //each up cycle followed by down cycle 
....................                         //charge the cap for the down read cycle 
....................                         output_drive(S_R_PIN); 
01A2:  BCF    05.1
....................                         output_high(S_R_PIN); 
01A3:  BCF    05.1
01A4:  BCF    03.5
01A5:  BSF    05.1
....................                     } 
01A6:  GOTO   1AF
....................                     else 
....................                     {/*down cycle*/ 
....................                         output_bit(LED_DOWN_PIN, !(input_state(S_R_PIN))); 
01A7:  BTFSS  05.1
01A8:  GOTO   1AB
01A9:  BCF    05.6
01AA:  GOTO   1AC
01AB:  BSF    05.6
01AC:  BSF    03.5
01AD:  BCF    05.6
01AE:  BCF    03.5
....................                     } 
....................                 } 
....................             } 
01AF:  GOTO   1B4
....................             else 
....................             { 
....................                 output_low(S_W_PIN); 
01B0:  BSF    03.5
01B1:  BCF    05.2
01B2:  BCF    03.5
01B3:  BCF    05.2
....................             } 
....................             //charge before my turn while the last cycle was down 
....................             if((u8)(cycleCounter/2 + 1 - slaves)  == ID) 
01B4:  BCF    03.0
01B5:  RRF    29,W
01B6:  MOVWF  36
01B7:  RRF    28,W
01B8:  MOVWF  35
01B9:  MOVLW  01
01BA:  ADDWF  35,F
01BB:  BTFSC  03.0
01BC:  INCF   36,F
01BD:  MOVF   2A,W
01BE:  SUBWF  35,W
01BF:  MOVWF  77
01C0:  MOVF   36,W
01C1:  MOVWF  7A
01C2:  MOVLW  00
01C3:  BTFSS  03.0
01C4:  MOVLW  01
01C5:  SUBWF  7A,F
01C6:  MOVF   77,W
01C7:  SUBWF  2F,W
01C8:  BTFSS  03.2
01C9:  GOTO   1CF
....................             { 
....................                 output_drive(S_R_PIN); 
01CA:  BSF    03.5
01CB:  BCF    05.1
....................                 output_high(S_R_PIN); 
01CC:  BCF    05.1
01CD:  BCF    03.5
01CE:  BSF    05.1
....................             } 
....................         } 
....................         prevCLK_Edge = currentCLK_Edge; 
01CF:  MOVF   33,W
01D0:  MOVWF  34
01D1:  GOTO   10E
....................     } 
.................... } 
01D2:  SLEEP

Configuration Fuses:
   Word  1: 3F50   NOWDT PUT INTRC_IO NOMCLR BROWNOUT NOLVP NOCPD NOPROTECT
